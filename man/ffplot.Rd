% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ffplot.R
\name{ffplot}
\alias{ffplot}
\alias{ffplot.default}
\alias{ffplot.formula}
\title{Fast Friendly Plot}
\usage{
\method{ffplot}{formula}(formula, data = parent.frame(), ..., subset = NULL,
  smooth = NULL)

\method{ffplot}{default}(data, ...)
}
\arguments{
\item{formula}{a two-sided formula. The right hand side must contain only one term (which can be an interaction, e.g. \code{g1:g2}).}

\item{data}{a data frame}

\item{...}{other arguments passed into (all) geoms}

\item{subset}{an optional vector specifying a subset of the data}

\item{smooth}{logical (not yet implemented!)}
}
\value{
A ggplot object which can be printed or modified.
}
\description{
Plots subsets of your data using \code{\link[ggplot2]{ggplot}}.
}
\details{
The data is split into subsets for each unique value of the right hand side of \code{formula}.
Each term on the left hand side of \code{formula} is evaluated within that subset, and the results
are used to create a \code{\link[ggplot2]{layer}}.

By default, \code{geom}s are chosen as follows: if the left hand side term evaluates to a character or factor,
a histogram of proportions is plotted using \code{\link[ggplot2]{geom_histogram}}. If the term is numeric and
always returns a single value (e.g. \code{mean(y)}) then a line is plotted; if it always returns two values,
vertical lines are used; otherwise points are plotted. Certain functions are automagically recognized, e.g.
\code{\link{ci}} creates a \code{\link[ggplot2]{geom_errorbar}}.

The default method simply calls \code{ffplot.formula}, passing its first argument as \code{data}. This plays nicely
with \code{\link[dplyr]{dplyr}}.
}
\examples{
data(diamonds)
d30 <- diamonds[1:30,]
ffplot(price ~ carat, d30)
ffplot(price ~ color, d30)
# histogram:
ffplot(cut ~ color, d30)
ffplot(range(price) ~ color, d30)
ffplot(ci(price, 0.95) ~ color, d30)
ffplot(price + mean(price) ~ color, d30)
# customizing geoms:
ffplot(mean(price) + ci(price, .99) ~ color, d30, geom = c("point", "linerange"))
ffplot(price ~ color, diamonds, geom ="violin")
ffplot(mean(price) ~ color, diamonds, geom = "point", shape = 3)
# extra customization with ggplot:
ffplot(cut ~ color, diamonds) + scale_fill_grey()
\dontrun{
# with dplyr
library(dplyr)
diamonds \%>\% ffplot(cut ~ color)
}
}

